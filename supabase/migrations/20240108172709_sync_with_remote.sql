alter table "public"."units" drop constraint if exists "units_fkey";

alter table "public"."units" drop constraint if exists "units_unique_week_number";

drop index if exists "public"."units_unique_week_number";

create table if not exists "public"."modules" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "description" text
);


create table if not exists "public"."modules_in_course" (
    "module_id" bigint not null,
    "course_id" bigint not null
);


alter table "public"."units" drop column if exists "content";

alter table "public"."units" drop column if exists "course_id";

alter table "public"."units" drop column if exists "number";

alter table "public"."units" drop column if exists "task";

alter table "public"."units" drop column if exists "title";

alter table "public"."units" drop column if exists "week";

alter table "public"."units" add column if not exists "directory" text not null;

alter table "public"."units" add column if not exists "module_id" bigint not null;

alter table "public"."units" add column if not exists "name" text not null;

CREATE UNIQUE INDEX if not exists modules_in_course_pkey ON public.modules_in_course USING btree (module_id, course_id);

CREATE UNIQUE INDEX if not exists modules_pkey ON public.modules USING btree (id);

-- alter table "public"."modules" add constraint "modules_pkey" PRIMARY KEY using index "modules_pkey";

-- alter table "public"."modules_in_course" add constraint "modules_in_course_pkey" PRIMARY KEY using index "modules_in_course_pkey";

-- alter table "public"."modules_in_course" add constraint "modules_in_course_course_id_fkey" FOREIGN KEY (course_id) REFERENCES courses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."modules_in_course" validate constraint "modules_in_course_course_id_fkey";

-- alter table "public"."modules_in_course" add constraint "modules_in_course_module_id_fkey" FOREIGN KEY (module_id) REFERENCES modules(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."modules_in_course" validate constraint "modules_in_course_module_id_fkey";

-- alter table "public"."units" add constraint "units_module_id_fkey" FOREIGN KEY (module_id) REFERENCES modules(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."units" validate constraint "units_module_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.user (id)
  values (new.id);
  insert into public.user_in_course (course_id, user_id)
  select id, new.id from public.courses;
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.new_user_progress()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.user_in_course (course_id, user_id)
    select id, new.id
    from public.courses;

    insert into public.user_unit_completion (user_id, unit_id)
    select new.id, units.id
    from public.units;

    return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.set_unit_title()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
    if new.title = '' then
        new.title := 'Unit ' || new.number;
    end if;
    return new;
end;
$function$
;


