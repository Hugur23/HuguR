
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.user (id)
  values (new.id);
  insert into public.user_in_course (course_id, user_id)
  select id, new.id from public.courses;
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."new_user_progress"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.user_in_course (course_id, user_id)
    select id, new.id
    from public.courses;

    insert into public.user_unit_completion (user_id, unit_id)
    select new.id, units.id
    from public.units;

    return new;
end;
$$;

ALTER FUNCTION "public"."new_user_progress"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."set_unit_title"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
    if new.title = '' then
        new.title := 'Unit ' || new.number;
    end if;
    return new;
end;
$$;

ALTER FUNCTION "public"."set_unit_title"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."articles" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "title" character varying NOT NULL,
    "content" "text" NOT NULL,
    "description" "text" NOT NULL,
    "image" "text" DEFAULT '/images/peopletalking.jpg'::"text" NOT NULL
);

ALTER TABLE "public"."articles" OWNER TO "postgres";

ALTER TABLE "public"."articles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."articles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."courses" (
    "id" bigint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "duration" smallint NOT NULL,
    "description" "text" DEFAULT ''::"text",
    "image_url" "text" DEFAULT ''::"text"
);

ALTER TABLE "public"."courses" OWNER TO "postgres";

ALTER TABLE "public"."courses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."courses_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."diary" (
    "id" bigint NOT NULL,
    "date" "date" DEFAULT "now"() NOT NULL,
    "mood" smallint NOT NULL,
    "thoughts" "text",
    "behaviour" "text",
    "coping_strategies" "text",
    "reassessment" "text",
    "circumstance" "text" NOT NULL,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."diary" OWNER TO "postgres";

ALTER TABLE "public"."diary" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."diary_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."emotions" (
    "diary_id" bigint NOT NULL,
    "name" character varying NOT NULL,
    "intensity" smallint NOT NULL
);

ALTER TABLE "public"."emotions" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."emotions_options" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL
);

ALTER TABLE "public"."emotions_options" OWNER TO "postgres";

ALTER TABLE "public"."emotions_options" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."emotions_options_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."modules" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "description" "text"
);

ALTER TABLE "public"."modules" OWNER TO "postgres";

ALTER TABLE "public"."modules" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."modules_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."modules_in_course" (
    "module_id" bigint NOT NULL,
    "course_id" bigint NOT NULL
);

ALTER TABLE "public"."modules_in_course" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."symptoms" (
    "diary_id" bigint NOT NULL,
    "name" character varying NOT NULL
);

ALTER TABLE "public"."symptoms" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."symptoms_options" (
    "id" bigint NOT NULL,
    "name" character varying NOT NULL
);

ALTER TABLE "public"."symptoms_options" OWNER TO "postgres";

ALTER TABLE "public"."symptoms_options" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."symptoms_options_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."units" (
    "id" bigint NOT NULL,
    "directory" "text" NOT NULL,
    "module_id" bigint NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."units" OWNER TO "postgres";

ALTER TABLE "public"."units" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."units_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_in_course" (
    "course_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "progress" smallint DEFAULT '0'::smallint
);

ALTER TABLE "public"."user_in_course" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_unit_completion" (
    "user_id" "uuid" NOT NULL,
    "unit_id" bigint NOT NULL,
    "completed" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."user_unit_completion" OWNER TO "postgres";

ALTER TABLE ONLY "public"."articles"
    ADD CONSTRAINT "articles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."courses"
    ADD CONSTRAINT "courses_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."diary"
    ADD CONSTRAINT "diary_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."emotions_options"
    ADD CONSTRAINT "emotions_options_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."emotions_options"
    ADD CONSTRAINT "emotions_options_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."emotions"
    ADD CONSTRAINT "emotions_pkey" PRIMARY KEY ("diary_id", "name");

ALTER TABLE ONLY "public"."modules_in_course"
    ADD CONSTRAINT "modules_in_course_pkey" PRIMARY KEY ("module_id", "course_id");

ALTER TABLE ONLY "public"."modules"
    ADD CONSTRAINT "modules_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."symptoms_options"
    ADD CONSTRAINT "symptoms_options_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."symptoms_options"
    ADD CONSTRAINT "symptoms_options_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."symptoms"
    ADD CONSTRAINT "symptoms_pkey" PRIMARY KEY ("diary_id", "name");

ALTER TABLE ONLY "public"."units"
    ADD CONSTRAINT "units_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_in_course"
    ADD CONSTRAINT "user_in_course_pkey" PRIMARY KEY ("course_id", "user_id");

ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_unit_completion"
    ADD CONSTRAINT "user_unit_completion_pkey" PRIMARY KEY ("user_id", "unit_id");

ALTER TABLE ONLY "public"."emotions"
    ADD CONSTRAINT "emotions_diary_id_fkey" FOREIGN KEY ("diary_id") REFERENCES "public"."diary"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."modules_in_course"
    ADD CONSTRAINT "modules_in_course_course_id_fkey" FOREIGN KEY ("course_id") REFERENCES "public"."courses"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."modules_in_course"
    ADD CONSTRAINT "modules_in_course_module_id_fkey" FOREIGN KEY ("module_id") REFERENCES "public"."modules"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."symptoms"
    ADD CONSTRAINT "symptoms_diary_id_fkey" FOREIGN KEY ("diary_id") REFERENCES "public"."diary"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."units"
    ADD CONSTRAINT "units_module_id_fkey" FOREIGN KEY ("module_id") REFERENCES "public"."modules"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_in_course"
    ADD CONSTRAINT "user_in_course_course_id_fkey" FOREIGN KEY ("course_id") REFERENCES "public"."courses"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_in_course"
    ADD CONSTRAINT "user_in_course_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_unit_completion"
    ADD CONSTRAINT "user_unit_completion_unit_id_fkey" FOREIGN KEY ("unit_id") REFERENCES "public"."units"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_unit_completion"
    ADD CONSTRAINT "user_unit_completion_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON DELETE CASCADE;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."emotions" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."symptoms" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."diary" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable read access for all users" ON "public"."emotions" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."emotions_options" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."symptoms" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."symptoms_options" FOR SELECT USING (true);

CREATE POLICY "Enable select for users based on user_id" ON "public"."diary" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable select for users based on user_id" ON "public"."user_unit_completion" FOR SELECT USING (("auth"."uid"() = "user_id"));

ALTER TABLE "public"."diary" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."emotions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."emotions_options" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."symptoms" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."symptoms_options" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_unit_completion" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."new_user_progress"() TO "anon";
GRANT ALL ON FUNCTION "public"."new_user_progress"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."new_user_progress"() TO "service_role";

GRANT ALL ON FUNCTION "public"."set_unit_title"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_unit_title"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_unit_title"() TO "service_role";

GRANT ALL ON TABLE "public"."articles" TO "anon";
GRANT ALL ON TABLE "public"."articles" TO "authenticated";
GRANT ALL ON TABLE "public"."articles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."articles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."articles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."articles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."courses" TO "anon";
GRANT ALL ON TABLE "public"."courses" TO "authenticated";
GRANT ALL ON TABLE "public"."courses" TO "service_role";

GRANT ALL ON SEQUENCE "public"."courses_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."courses_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."courses_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."diary" TO "anon";
GRANT ALL ON TABLE "public"."diary" TO "authenticated";
GRANT ALL ON TABLE "public"."diary" TO "service_role";

GRANT ALL ON SEQUENCE "public"."diary_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."diary_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."diary_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."emotions" TO "anon";
GRANT ALL ON TABLE "public"."emotions" TO "authenticated";
GRANT ALL ON TABLE "public"."emotions" TO "service_role";

GRANT ALL ON TABLE "public"."emotions_options" TO "anon";
GRANT ALL ON TABLE "public"."emotions_options" TO "authenticated";
GRANT ALL ON TABLE "public"."emotions_options" TO "service_role";

GRANT ALL ON SEQUENCE "public"."emotions_options_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."emotions_options_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."emotions_options_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."modules" TO "anon";
GRANT ALL ON TABLE "public"."modules" TO "authenticated";
GRANT ALL ON TABLE "public"."modules" TO "service_role";

GRANT ALL ON SEQUENCE "public"."modules_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."modules_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."modules_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."modules_in_course" TO "anon";
GRANT ALL ON TABLE "public"."modules_in_course" TO "authenticated";
GRANT ALL ON TABLE "public"."modules_in_course" TO "service_role";

GRANT ALL ON TABLE "public"."symptoms" TO "anon";
GRANT ALL ON TABLE "public"."symptoms" TO "authenticated";
GRANT ALL ON TABLE "public"."symptoms" TO "service_role";

GRANT ALL ON TABLE "public"."symptoms_options" TO "anon";
GRANT ALL ON TABLE "public"."symptoms_options" TO "authenticated";
GRANT ALL ON TABLE "public"."symptoms_options" TO "service_role";

GRANT ALL ON SEQUENCE "public"."symptoms_options_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."symptoms_options_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."symptoms_options_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."units" TO "anon";
GRANT ALL ON TABLE "public"."units" TO "authenticated";
GRANT ALL ON TABLE "public"."units" TO "service_role";

GRANT ALL ON SEQUENCE "public"."units_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."units_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."units_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user" TO "anon";
GRANT ALL ON TABLE "public"."user" TO "authenticated";
GRANT ALL ON TABLE "public"."user" TO "service_role";

GRANT ALL ON TABLE "public"."user_in_course" TO "anon";
GRANT ALL ON TABLE "public"."user_in_course" TO "authenticated";
GRANT ALL ON TABLE "public"."user_in_course" TO "service_role";

GRANT ALL ON TABLE "public"."user_unit_completion" TO "anon";
GRANT ALL ON TABLE "public"."user_unit_completion" TO "authenticated";
GRANT ALL ON TABLE "public"."user_unit_completion" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
