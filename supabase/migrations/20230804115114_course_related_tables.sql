-- ! Everything using type jsonb should use the structure:
-- {"is": "some text", "en": "some text"}
-- for translations

create table "public"."courses" (
    "id" bigint generated by default as identity not null,
    "name" jsonb not null,
    "duration" smallint not null,
    "description" jsonb not null,
    "image_url" text default ''::text,
    constraint courses_pkey primary key (id)
);

create table "public"."user_in_course" (
    "course_id" bigint not null,
    "user_id" uuid not null,
    "progress" smallint default '0'::smallint,
    constraint user_in_course_pkey primary key (course_id, user_id),
    constraint user_in_course_course_id_fkey foreign key (course_id) references courses (id) on delete cascade,
    constraint user_in_course_user_id_fkey foreign key (user_id) references "user" (id) on delete cascade
);

create table "public"."modules"(
    "id" bigint generated by default as identity not null,
    "name" jsonb not null,
    "course_id" bigint not null,
    "order_number" smallint null,
    constraint module_pkey primary key (id),
    constraint module_fkey foreign key (course_id) references courses (id) on delete cascade,
    constraint modules_unique_course_id_number unique (course_id, order_number)
);

create function public.set_module_data()
returns TRIGGER as $$
begin
    select coalesce(max(order_number), 0) + 1 into new.order_number
    from public.modules
    where course_id = new.course_id;
    IF NEW.name IS NULL THEN
        NEW.name := jsonb_build_object(
            'is', 'Kafli ' || NEW.order_number,
            'en', 'Module ' || NEW.order_number
        );
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER set_module_data_trigger
    BEFORE INSERT ON public.modules
    FOR EACH ROW
    EXECUTE FUNCTION public.set_module_data();

create table "public"."units"(
    "id" bigint generated by default as identity not null,
    "order_number" smallint null,
    "module_id" smallint not null,
    "name" jsonb not null,
    "task" jsonb null,
    "file_url" jsonb null,
    constraint units_pkey primary key (id),
    constraint units_unique_module_id_number unique (module_id, order_number),
    constraint units_fkey foreign key (module_id) references modules (id) on delete cascade
);

CREATE OR REPLACE FUNCTION public.set_unit_data()
RETURNS TRIGGER AS $$
BEGIN
    select coalesce(max(order_number), 0) + 1 into new.order_number
    from public.units
    where module_id = new.module_id;
    IF NEW.name IS NULL THEN
        NEW.name := jsonb_build_object(
            'is', 'Eining ' || NEW.order_number,
            'en', 'Unit ' || NEW.order_number
        );
    END IF;
    new.file_url := jsonb_build_object(
        'is', new.id || '-is.md',
        'en', new.id || '-en.md'
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

create trigger set_unit_data_trigger
    before insert on public.units
    for each row
    execute function public.set_unit_data();

create table "public"."user_unit_completion" (
    "user_id" uuid not null,
    "unit_id" bigint not null,
    "completed" boolean not null default false,
    constraint user_unit_completion_pkey primary key (user_id, unit_id),
    constraint user_unit_completion_user_id_fkey foreign key (user_id) references "user" (id) on delete cascade,
    constraint user_unit_completion_unit_id_fkey foreign key (unit_id) references units (id) on delete cascade
);

create function public.new_user_progress()
returns trigger as $$
begin
    insert into public.user_in_course (course_id, user_id)
    select id, new.id
    from public.courses;
    insert into public.user_unit_completion (user_id, unit_id)
    select new.id, units.id
    from public.units;
    return new;
end;
$$ language plpgsql security definer;
create trigger on_user_created
    after insert on auth.users
    for each row execute procedure public.new_user_progress();

alter table "public"."user_unit_completion" enable row level security;

create policy "Enable select for users based on user_id"
on "public"."user_unit_completion"
as permissive
for select
to public
using ((auth.uid() = user_id));


-- Cut from user_table.sql


